# -*- coding: utf-8 -*-
"""digitRec.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ukYmBgpD4RAZzJva0GyfrYrtjC61LGKy
"""

x = 5

!pip install mnist

import cv2 as cv
import numpy as np
import matplotlib.pyplot as plt
import tensorflow as tf
import mnist

img_train = mnist.train_images()
label_train = mnist.train_labels()
label_test = mnist.test_labels()
img_test = mnist.test_images()

img_train = tf.keras.utils.normalize(img_train,axis=1)
img_test = tf.keras.utils.normalize(img_test,axis=1)

model = tf.keras.models.Sequential()
model.add(tf.keras.layers.Flatten(input_shape = (28,28)))
model.add(tf.keras.layers.Dense(units=256,activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(units=256,activation=tf.nn.relu))
model.add(tf.keras.layers.Dense(units=10, activation=tf.nn.softmax))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])

model.fit(img_train,label_train, epochs=7)
accuracy, loss = model.evaluate(img_test, label_test)
print(accuracy)
print(loss)

for i in range(0,10):
  img = img_train[i]
  print(label_train[i])
  plt.imshow(img,cmap=plt.cm.binary)
  plt.show()

for i in range(80,91):
  img = cv.imread(f'untitled ({i}).png')[:,:,0]
  img = np.invert(np.array([img]))
  prediction = model.predict(img)
  print(np.argmax(prediction))
  plt.imshow(img[0], cmap = plt.cm.binary)
  plt.show()
